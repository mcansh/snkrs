generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "darwin-arm64"]
}

datasource postgresql {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sneaker {
  id            String    @id @default(uuid())
  brand         Brand     @relation(fields: [brandId], references: [id])
  brandId       String
  colorway      String
  imagePublicId String
  model         String
  purchaseDate  DateTime
  size          Float     @default(10)
  price         Int
  retailPrice   Int
  sold          Boolean   @default(false)
  soldDate      DateTime?
  soldPrice     Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @default(now()) @updatedAt
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId        String
}

model Brand {
  id       String    @id @default(uuid())
  name     String    @unique
  slug     String    @unique
  sneakers Sneaker[]
}

enum Role {
  ADMIN
  USER
}

model User {
  id         String    @id @default(uuid())
  email      String    @unique
  givenName  String
  familyName String
  fullName   String
  password   String
  username   String    @unique
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @default(now()) @updatedAt
  sneakers   Sneaker[]
  settings   Settings?
  role       Role      @default(USER)
}

model Settings {
  id     String @id @default(uuid())
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String @unique

  // if true, shows the purchase price of a user's sneakers
  showPurchasePrice Boolean @default(true)
  // if true, shows the retail price of a user's sneakers
  showRetailPrice   Boolean @default(true)
  // if true, shows the total cost of a user's collection
  showTotalPrice    Boolean @default(false)
}
